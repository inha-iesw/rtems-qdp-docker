[sparc/gr712rc]
# Selects the compiler used to build the BSP (allowed values are "gcc" and
# "clang").  Please note that the values of some options depend on the compiler
# selection and changing the compiler may lead to unpredictable behaviour if
# these options are not adjusted as well.  Use the --rtems-compiler command line
# option to get the default values for a particular compiler via
# ./waf bspdefaults.
COMPILER = gcc
# Defines the program prefix of tools (compiler, assembler, linker)
# used to build RTEMS. This option may be used to build RTEMS with a
# vendor tool suite. Please note, support issues related to using this
# option with vendor tool suites should be directed to the vendor of
# the tools.
PROGRAM_PREFIX = ${ARCH}-rtems${__RTEMS_MAJOR__}-
# Flags passed to the library archiver
ARFLAGS = crD
# Warning flags passed to the C and C++ compiler
WARNING_FLAGS = -Wall
# Warning flags passed to the C compiler
CC_WARNING_FLAGS = -Wmissing-prototypes -Wimplicit-function-declaration -Wstrict-prototypes -Wnested-externs
# Warning flags passed to the C++ compiler
CXX_WARNING_FLAGS = 
# Enable the Ada support
__RTEMS_ADA__ = False
# Defines the build label returned by rtems_get_build_label().
RTEMS_BUILD_LABEL = DEFAULT
# Enable the RTEMS internal debug support
RTEMS_DEBUG = False
# Enable the Driver Manager startup
RTEMS_DRVMGR_STARTUP = False
# If set to "True", then the message passing based multiprocessing
# support (MPCI) is enabled, otherwise it is disabled.  Do not confuse
# this with the SMP support which is enabled by the RTEMS_SMP option.
RTEMS_MULTIPROCESSING = False
# Enable the Newlib C library support
RTEMS_NEWLIB = True
# Enable the para-virtualization support
RTEMS_PARAVIRT = False
# Enable support for POSIX signals, sporadic server and lio_listio()
RTEMS_POSIX_API = False
# Enable the SMP lock profiling support
RTEMS_PROFILING = False
# Enable the Symmetric Multiprocessing (SMP) support
RTEMS_SMP = False
# Enable the code and branch coverage support.
RTEMS_GCOV_COVERAGE = False
# Compiler flags recommended for components which should generate
# coverage information.
COVERAGE_COMPILER_FLAGS = 
# Linker flags recommended for executables which contain modules which
# generate coverage information.
COVERAGE_LINKER_FLAGS = 
# Build the test programs
BUILD_TESTS = False
# Build the Ada test programs (may be also enabled by BUILD_TESTS)
BUILD_ADATESTS = False
# Build the benchmark programs (may be also enabled by BUILD_TESTS)
BUILD_BENCHMARKS = False
# Build the file system test programs (may be also enabled by
# BUILD_TESTS)
BUILD_FSTESTS = False
# Build the library test programs (may be also enabled by BUILD_TESTS)
BUILD_LIBTESTS = False
# Build the MPCI test programs (may be also enabled by BUILD_TESTS)
BUILD_MPTESTS = False
# Build the POSIX test programs (may be also enabled by BUILD_TESTS)
BUILD_PSXTESTS = False
# Build the POSIX timing test programs (may be also enabled by
# BUILD_TESTS)
BUILD_PSXTMTESTS = False
# Build the Rhealstone benchmark programs (may be also enabled by
# BUILD_TESTS)
BUILD_RHEALSTONE = False
# Build the sample programs (may be also enabled by BUILD_TESTS)
BUILD_SAMPLES = True
# Build the SMP test programs (may be also enabled by BUILD_TESTS)
BUILD_SMPTESTS = False
# Build the single-processor test programs (may be also enabled by
# BUILD_TESTS)
BUILD_SPTESTS = False
# Build the timing test programs (may be also enabled by BUILD_TESTS)
BUILD_TMTESTS = False
# Build the unit test programs (may be also enabled by BUILD_TESTS)
BUILD_UNITTESTS = False
# Build the validation test programs (may be also enabled by
# BUILD_TESTS)
BUILD_VALIDATIONTESTS = False
# Sets the test verbosity of the RTEMS Test Framework.  Valid values
# are "Verbose", "Normal", and "Quiet".  For normal test runs you can
# use a verbosity of "Normal".  If you need a more detailed output,
# then you can set it to "Verbose".  For example, in case a regression
# occurred.  Reducing the verbosity level can significantly reduce the
# test duration especially on targets with a slow serial output
# device.  All verbosity levels produce enough output to notice failed
# test cases.  In particular, the begin and end of test information is
# not affected by the verbosity level.
RTEMS_TEST_VERBOSITY = Normal
# Default optimization flags for C and C++ compilers.
OPTIMIZATION_FLAGS = -O2 -g -fdata-sections -ffunction-sections
# Do the clock tick processing on the boot processor on behalf of all
# other processors.
CLOCK_DRIVER_USE_ONLY_BOOT_PROCESSOR = False
# ABI flags
ABI_FLAGS = -mcpu=leon3 -mfix-gr712rc
# This option defines the base address of the debug/console APBUART
# register block.
LEON3_APBUART_BASE = 0x80000100
# If this option is set to true, then the processor has the %asr22 and
# %asr23 up-counter.
LEON3_HAS_ASR_22_23_UP_COUNTER = False
# If this option is set to true, then it will be probed if the %asr22
# and %asr23 up-counter is available.
LEON3_PROBE_ASR_22_23_UP_COUNTER = False
# This option defines the base address of the DSU register block used
# by the clock driver and CPU counter implementation.  In general,
# using the Debug Support Unit (DSU) is not recommended for the clock
# driver and CPU counter implementation.  Before you use it, check
# that it is available in flight models and that the time tag register
# is implemented in radiation hardened flip-flops.  For the GR712RC,
# this is the case.
LEON3_DSU_BASE = 0x90000000
# This option defines the base address of the GPTIMER register block
# used by the clock driver.
LEON3_GPTIMER_BASE = 0x80000300
# This option defines the base address of the IRQ(A)MP register block.
LEON3_IRQAMP_BASE = 0x80000200
# This option specifies the interrupt line of the IRQ(A)MP extended
# interrupt.
LEON3_IRQAMP_EXTENDED_INTERRUPT = 12
# If this option is set to true, then the interrupt timestamping
# feature of the IRQ(A)MP is probed.  If it is available, then it may
# be used for the CPU counter and interrupt profiling.
LEON3_IRQAMP_PROBE_TIMESTAMP = False
# The leon3 console driver can operate in either polled or interrupt
# mode.  Under the simulator (especially when FAST_UART is defined),
# polled seems to operate better.
CONSOLE_USE_INTERRUPTS = 0
# This option defines the base address of the L2CACHE register block.
LEON3_L2CACHE_BASE = 0x00000000
# Always defined when on a LEON3 to enable the LEON3 support for
# determining the CPU core number in an SMP configuration.
BSP_LEON3_SMP = True
# If this option is set to true, then the processor local bus (PLB)
# frequency is directly defined by the first GPTIMER frequency
# neglecting the actual bus topology.  It is assumed that the boot
# loader configured the first GPTIMER to have a frequency of
# LEON3_GPTIMER_0_FREQUENCY_SET_BY_BOOT_LOADER.
LEON3_PLB_FREQUENCY_DEFINED_BY_GPTIMER = True
# Optimization flags passed to C and C++ compilers for the BSP.
BSP_OPTIMIZATION_FLAGS = ${OPTIMIZATION_FLAGS}
# Optimization flags passed to C and C++ compilers for the CPU kit.
CPUKIT_OPTIMIZATION_FLAGS = ${OPTIMIZATION_FLAGS}
# Optimization flags passed to C and C++ compiler for tests.
TEST_OPTIMIZATION_FLAGS = ${OPTIMIZATION_FLAGS}
# If defined to a non-zero value, prints the some information in case
# of a fatal error.
BSP_VERBOSE_FATAL_EXTENSION = 1
# Flags passed to the linker.
LINKFLAGS = 
# Flags passed to the linker at the end of the link command.
LDFLAGS = -Wl,--gc-sections
# Install the legacy application Makefile framework.
INSTALL_LEGACY_MAKEFILES = True
# If defined to a non-zero value, prints the exception context when an
# unexpected exception occurs.
BSP_PRINT_EXCEPTION_CONTEXT = 1
# If defined to a non-zero value, reset the board when the application
# exits.
BSP_RESET_BOARD_AT_EXIT = 1
# If defined to a non-zero value, print a message and wait until
# pressed before resetting board when application exits.
BSP_PRESS_KEY_FOR_RESET = 0
